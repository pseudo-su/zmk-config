/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L0 0
#define L1 1
#define L2 2
#define L3 3

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | RCTRL  |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '     |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RSHIFT |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp RCTRL
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp LALT &mo 1 &kp SPACE   &mt RALT RET &mo 2 &kp RMETA
                        >;
                };
                first_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp EXCL &kp AT   &kp HASH         &kp DLLR      &kp PRCNT         &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR      &trans
   &trans &kp ESC  &kp PIPE &kp LEFT_BRACKET &kp BACKSPACE &kp RIGHT_BRACKET &kp MINUS &kp UNDER &kp EQUAL       &kp PLUS &kp BACKSLASH &trans
   &trans &kp N1   &kp N2   &kp N3           &kp N4        &kp N5            &kp N6    &kp N7    &kp N8          &kp N9   &kp N0        &trans
                            &trans           &trans        &trans            &kp HOME  &trans   &kp END
                        >;
                };

                second_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp EXCL &kp AT    &kp HASH       &kp DLLR      &kp PRCNT       &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &trans
   &trans &kp ESC  &kp GRAVE &kp LEFT_BRACE &kp BACKSPACE &kp RIGHT_BRACE &kp LEFT  &kp DOWN &kp UP          &kp RIGHT &kp TILDE &trans
   &trans &kp N1   &kp N2    &kp N3         &kp N4        &kp N5          &kp N6    &kp N7   &kp N8          &kp N9    &kp N0    &trans
                             &mt LALT PG_UP &trans        &mt RALT PG_DN  &trans    &trans   &trans
                        >;
                };
                third_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans &trans &trans &trans &trans &trans
   &trans     &trans       &trans       &trans       &trans       &trans       &trans &trans &trans &trans &trans &trans
   &trans     &trans       &trans       &trans       &trans       &trans       &trans &trans &trans &trans &trans &trans
                                        &trans       &trans       &trans       &trans &trans &trans
                        >;
                };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <L1 L2>;
                        then-layer = <3>;
                };
        };
};
